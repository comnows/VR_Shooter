using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class EnemySyncDataModel 
{
    [RealtimeProperty(1, true, true)]
    private int _enemyHP;
    [RealtimeProperty(2, true, true)]
    private string _enemyBehaviorState;
    [RealtimeProperty(3, true, true)]
    private string _enemyTarget;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class EnemySyncDataModel : RealtimeModel {
    public int enemyHP {
        get {
            return _enemyHPProperty.value;
        }
        set {
            if (_enemyHPProperty.value == value) return;
            _enemyHPProperty.value = value;
            InvalidateReliableLength();
            FireEnemyHPDidChange(value);
        }
    }
    
    public string enemyBehaviorState {
        get {
            return _enemyBehaviorStateProperty.value;
        }
        set {
            if (_enemyBehaviorStateProperty.value == value) return;
            _enemyBehaviorStateProperty.value = value;
            InvalidateReliableLength();
            FireEnemyBehaviorStateDidChange(value);
        }
    }
    
    public string enemyTarget {
        get {
            return _enemyTargetProperty.value;
        }
        set {
            if (_enemyTargetProperty.value == value) return;
            _enemyTargetProperty.value = value;
            InvalidateReliableLength();
            FireEnemyTargetDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(EnemySyncDataModel model, T value);
    public event PropertyChangedHandler<int> enemyHPDidChange;
    public event PropertyChangedHandler<string> enemyBehaviorStateDidChange;
    public event PropertyChangedHandler<string> enemyTargetDidChange;
    
    public enum PropertyID : uint {
        EnemyHP = 1,
        EnemyBehaviorState = 2,
        EnemyTarget = 3,
    }
    
    #region Properties
    
    private ReliableProperty<int> _enemyHPProperty;
    
    private ReliableProperty<string> _enemyBehaviorStateProperty;
    
    private ReliableProperty<string> _enemyTargetProperty;
    
    #endregion
    
    public EnemySyncDataModel() : base(null) {
        _enemyHPProperty = new ReliableProperty<int>(1, _enemyHP);
        _enemyBehaviorStateProperty = new ReliableProperty<string>(2, _enemyBehaviorState);
        _enemyTargetProperty = new ReliableProperty<string>(3, _enemyTarget);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _enemyHPProperty.UnsubscribeCallback();
        _enemyBehaviorStateProperty.UnsubscribeCallback();
        _enemyTargetProperty.UnsubscribeCallback();
    }
    
    private void FireEnemyHPDidChange(int value) {
        try {
            enemyHPDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireEnemyBehaviorStateDidChange(string value) {
        try {
            enemyBehaviorStateDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireEnemyTargetDidChange(string value) {
        try {
            enemyTargetDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _enemyHPProperty.WriteLength(context);
        length += _enemyBehaviorStateProperty.WriteLength(context);
        length += _enemyTargetProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _enemyHPProperty.Write(stream, context);
        writes |= _enemyBehaviorStateProperty.Write(stream, context);
        writes |= _enemyTargetProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.EnemyHP: {
                    changed = _enemyHPProperty.Read(stream, context);
                    if (changed) FireEnemyHPDidChange(enemyHP);
                    break;
                }
                case (uint) PropertyID.EnemyBehaviorState: {
                    changed = _enemyBehaviorStateProperty.Read(stream, context);
                    if (changed) FireEnemyBehaviorStateDidChange(enemyBehaviorState);
                    break;
                }
                case (uint) PropertyID.EnemyTarget: {
                    changed = _enemyTargetProperty.Read(stream, context);
                    if (changed) FireEnemyTargetDidChange(enemyTarget);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _enemyHP = enemyHP;
        _enemyBehaviorState = enemyBehaviorState;
        _enemyTarget = enemyTarget;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
