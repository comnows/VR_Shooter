using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class PlayerDataModel 
{
    [RealtimeProperty(1, true, true)]
    private int _playerHP;
    [RealtimeProperty(2, true, true)]
    private int _playerScore;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class PlayerDataModel : RealtimeModel {
    public int playerHP {
        get {
            return _playerHPProperty.value;
        }
        set {
            if (_playerHPProperty.value == value) return;
            _playerHPProperty.value = value;
            InvalidateReliableLength();
            FirePlayerHPDidChange(value);
        }
    }
    
    public int playerScore {
        get {
            return _playerScoreProperty.value;
        }
        set {
            if (_playerScoreProperty.value == value) return;
            _playerScoreProperty.value = value;
            InvalidateReliableLength();
            FirePlayerScoreDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(PlayerDataModel model, T value);
    public event PropertyChangedHandler<int> playerHPDidChange;
    public event PropertyChangedHandler<int> playerScoreDidChange;
    
    public enum PropertyID : uint {
        PlayerHP = 1,
        PlayerScore = 2,
    }
    
    #region Properties
    
    private ReliableProperty<int> _playerHPProperty;
    
    private ReliableProperty<int> _playerScoreProperty;
    
    #endregion
    
    public PlayerDataModel() : base(null) {
        _playerHPProperty = new ReliableProperty<int>(1, _playerHP);
        _playerScoreProperty = new ReliableProperty<int>(2, _playerScore);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _playerHPProperty.UnsubscribeCallback();
        _playerScoreProperty.UnsubscribeCallback();
    }
    
    private void FirePlayerHPDidChange(int value) {
        try {
            playerHPDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FirePlayerScoreDidChange(int value) {
        try {
            playerScoreDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _playerHPProperty.WriteLength(context);
        length += _playerScoreProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _playerHPProperty.Write(stream, context);
        writes |= _playerScoreProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.PlayerHP: {
                    changed = _playerHPProperty.Read(stream, context);
                    if (changed) FirePlayerHPDidChange(playerHP);
                    break;
                }
                case (uint) PropertyID.PlayerScore: {
                    changed = _playerScoreProperty.Read(stream, context);
                    if (changed) FirePlayerScoreDidChange(playerScore);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _playerHP = playerHP;
        _playerScore = playerScore;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
