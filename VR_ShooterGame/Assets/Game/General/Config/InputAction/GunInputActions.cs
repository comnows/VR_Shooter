//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Game/General/Config/InputAction/GunInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GunInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GunInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GunInputActions"",
    ""maps"": [
        {
            ""name"": ""GunControls"",
            ""id"": ""11d8ea55-17fc-4f47-bd03-c2fc0c3374fd"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Value"",
                    ""id"": ""1a8f7857-ab94-457a-9c8f-18852fcf9d1e"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Aiming"",
                    ""type"": ""Button"",
                    ""id"": ""f23f7ea5-d674-4507-be23-bfaf63992a26"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""97798ea7-2de9-407b-8900-136dacf57532"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""176fda60-dba1-4cd3-903c-88f5c2f613b8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f37c2451-9779-411e-82d7-77ad318200d5"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aiming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c9084add-4332-4db0-8530-680471431953"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GunControls
        m_GunControls = asset.FindActionMap("GunControls", throwIfNotFound: true);
        m_GunControls_Shoot = m_GunControls.FindAction("Shoot", throwIfNotFound: true);
        m_GunControls_Aiming = m_GunControls.FindAction("Aiming", throwIfNotFound: true);
        m_GunControls_Reload = m_GunControls.FindAction("Reload", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GunControls
    private readonly InputActionMap m_GunControls;
    private IGunControlsActions m_GunControlsActionsCallbackInterface;
    private readonly InputAction m_GunControls_Shoot;
    private readonly InputAction m_GunControls_Aiming;
    private readonly InputAction m_GunControls_Reload;
    public struct GunControlsActions
    {
        private @GunInputActions m_Wrapper;
        public GunControlsActions(@GunInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shoot => m_Wrapper.m_GunControls_Shoot;
        public InputAction @Aiming => m_Wrapper.m_GunControls_Aiming;
        public InputAction @Reload => m_Wrapper.m_GunControls_Reload;
        public InputActionMap Get() { return m_Wrapper.m_GunControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GunControlsActions set) { return set.Get(); }
        public void SetCallbacks(IGunControlsActions instance)
        {
            if (m_Wrapper.m_GunControlsActionsCallbackInterface != null)
            {
                @Shoot.started -= m_Wrapper.m_GunControlsActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_GunControlsActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_GunControlsActionsCallbackInterface.OnShoot;
                @Aiming.started -= m_Wrapper.m_GunControlsActionsCallbackInterface.OnAiming;
                @Aiming.performed -= m_Wrapper.m_GunControlsActionsCallbackInterface.OnAiming;
                @Aiming.canceled -= m_Wrapper.m_GunControlsActionsCallbackInterface.OnAiming;
                @Reload.started -= m_Wrapper.m_GunControlsActionsCallbackInterface.OnReload;
                @Reload.performed -= m_Wrapper.m_GunControlsActionsCallbackInterface.OnReload;
                @Reload.canceled -= m_Wrapper.m_GunControlsActionsCallbackInterface.OnReload;
            }
            m_Wrapper.m_GunControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @Aiming.started += instance.OnAiming;
                @Aiming.performed += instance.OnAiming;
                @Aiming.canceled += instance.OnAiming;
                @Reload.started += instance.OnReload;
                @Reload.performed += instance.OnReload;
                @Reload.canceled += instance.OnReload;
            }
        }
    }
    public GunControlsActions @GunControls => new GunControlsActions(this);
    public interface IGunControlsActions
    {
        void OnShoot(InputAction.CallbackContext context);
        void OnAiming(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
    }
}
